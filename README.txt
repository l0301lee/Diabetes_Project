===============================================================================================Diabetes Prevalence and Predictive Factors in the Pima Indian Community - A Diagnostic and Statistical Approach===============================================================================================1. Description:-----------------------------------------------------------------------------------------------The main goal of this project is to dissect and predict the presence of diabetes using these diagnostic measurements provided by the dataset.  The data set is from the National Institute of Diabetes and Digestive and Kidney Diseases.2. Table of Contents:-----------------------------------------------------------------------------------------------1. Description2. Table of Contents3. Requirements4. Usage   4.1. data_cleaning.py   4.2. revalence_risk_factors.py   4.3. predictive_modeling.py   4.4. glucose_diabetes.py   4.5. lifestyle_indicators.py   4.6. insulin_resistance.py5. Troubleshooting6. Contact Information3. Requirements:-----------------------------------------------------------------------------------------------Before you run the scripts, make sure the following software and packages are installed on your Python environment:- Python 3.xx- pandas- numpy- scikit-learn- statsmodels- matplotlib- seabornYou can install the necessary packages using pip with the following command:pip install pandas scikit-learn statsmodels matplotlib seabornBefore running any of the data analysis scripts, ensure you have the cleaned and preprocessed dataset named 'diabetes_clean.csv' in the same directory as the script by running data_cleaning.py. If your dataset is named differently, update the file name in the script accordingly.4. Usage:-----------------------------------------------------------------------------------------------Instructions on how to run the various scripts included in the project.4.1. data_cleaning.py:Follow the steps below to clean your data:Place your raw dataset in the same directory as the data cleaning script. The default file name should be 'diabetes.csv'. If your dataset is named differently, please replace 'diabetes.csv' in the script with your actual file name.Open your terminal or command prompt, navigate to the directory containing the data cleaning script, and run it using Python:> python data_cleaning.pyThe script will perform the following operations on your dataset:- Load the dataset and provide initial dataset inspection results, such as the first few rows, statistical summary, and data types.- Identify and handle missing values, replacing zeros with NaN for specified columns that should not contain zeros (e.g., 'Glucose', 'BloodPressure', etc.).- Print the number of missing values per column.- Drop rows with missing values or apply other missing value handling methods as per your discretion.- Remove outliers from the dataset based on the Interquartile Range (IQR) method for specified columns.- Save the cleaned dataset to a new file named 'diabetes_clean.csv' in the same directory.After the script finishes running, you will have a new file 'diabetes_clean.csv' in your directory. This file contains the cleaned dataset, which is now ready for further analysis.Please ensure you run the data cleaning script before executing any analysis scripts to avoid any inconsistencies or errors in your analysis due to unclean data.4.2. prevalence_risk_factors.py:Ensure you have the cleaned and preprocessed dataset named 'diabetes_clean.csv' in the same directory as the script. If your dataset is named differently, update the file name in the script accordingly.Open a terminal or command prompt. Navigate to the directory containing your script. Then. run the script using Python:> python prevalence_risk_factos.pyThe script will perform the following tasks and output the corresponding results:- Group the dataset by age and calculate the prevalence of diabetes within each group. The results will be saved as a text file named 'prevalence_by_age.txt' in a folder named 'results'.- Conduct logistic regression analysis using age and other risk factors as independent variables. The model's summary will be printed to the console and saved in a text file named 'prevalence_risk_factor_summary.txt' in the 'results' directory.- Perform cross-validation of the logistic regression model, and print the accuracy results to the console. These results will also be saved as a text file named 'cross_validation_results.txt' in the 'results' directory.- Generate a bar chart for the prevalence of diabetes by age group and save it as a PNG file named 'prevalence_by_age_group.png' in the 'results' directory.All output files will be stored in the 'results' folder, which the script will create if it does not exist. Ensure you have write permissions in the directory where the script is run.4.3. predictive_modeling.py:Ensure you have the cleaned and preprocessed dataset named 'diabetes_clean.csv' in the same directory as the script. If your dataset is named differently, update the filename in the script accordingly.To run the script, open a terminal or command prompt, navigate to the directory containing your script and run the script using Python:> python predictive_modeling.pyThe script will perform the following tasks and output the corresponding results:- Split the data into training and testing sets.- Train a RandomForest classifier on the training data.- Evaluate the trained model on the testing data and print accuracy and ROC AUC Score to the console. These metrics will also be saved in a text file named 'evaluation_metrics.txt' in the 'results' directory.- Calculate and print the classification report for the test data, which will be saved to the same 'evaluation_metrics.txt' file.- Determine feature importance using permutation importance and save the results to a text file named 'feature_importances.txt' in the 'results' directory.- Generate a bar chart for feature importance and save it as a PNG file named 'feature_importance.png' in the 'results' directory.All output files will be stored in the 'results' folder, which the script will create if it does not exist. Make sure you have write permissions in the directory where the script is run.4.4. glucose_diabetes.py:To execute the script, follow these steps:Open a command prompt or terminal window. Change directory to where your script is located with cd path/to/your/script. Then, run the script with the command:> python glucose_diabetes.py- The script will execute logistic regression to investigate the relationship between glucose levels and diabetes and provide the following outputs:- A summary of the logistic regression analysis will be written to 'logistic_regression_summary.txt' in the 'results' folder.- A scatter plot of the observed data points and a fitted logistic regression curve will be saved as 'glucose_diabetes_association.png' in the 'results' folder.All the generated output files will be located in the 'results' directory, which the script will create if it does not already exist. Please ensure you have the necessary permissions to create a directory and write files in the location where the script will be run.4.5. lifestyle_indicators.pyThe script requires a clean and preprocessed dataset named 'diabetes_clean.csv' in the working directory. Ensure that this file exists and is formatted correctly for the analysis.To run the script, follow these steps:Navigate to the script's directory in a command-line interface. Execute the script using Python with the command:> python lifestyle_indicators.pyThe script will perform logistic regression to evaluate the impact of BMI, Blood Pressure, and Skin Thickness on diabetes outcomes and will produce:- A logistic regression summary saved as 'lifestyle_indicator_summary.txt' within the 'results' folder.- Distribution histograms and boxplots for each variable categorized by outcome, saved as 'distribution_and_boxplots.png' in the 'results' folder.- Three plots showing the predicted probabilities of diabetes as a function of BMI, Blood Pressure, and Skin Thickness, respectively, saved as 'predicted_probabilities_bmi.png', 'predicted_probabilities_bp.png', and 'predicted_probabilities_st.png' in the 'results' folder.All output files will be stored in the 'results' directory created by the script. Verify that you have appropriate write permissions in the script's directory to avoid any file creation issues.4.6 insuline_resistance.py:A preprocessed dataset named 'diabetes_clean.csv' is required to be in the working directory for the script to function. Ensure that the dataset is accessible and properly formatted.Open your terminal or command prompt and navigate to the directory containing the script. Run the script using Python with the command:> python insuline_resistance.pyUpon successful execution, the script will perform logistic regression and output:- A summary of the logistic regression analysis saved as 'insulin_resistance_summary.txt' in the 'results' directory.- A scatter plot with a logistic curve depicting the relationship between serum insulin levels and the predicted probability of diabetes, saved as 'insulin_probability_plot.png' in the 'results' directory.All output files are stored in the 'results' directory created by the script. Ensure that the user running the script has the necessary permissions to create and write to this directory.5. Troubleshooting:-----------------------------------------------------------------------------------------------If there are any errors during execution, refer to the error messages output to the console. These messages can help diagnose common issues such as missing data files or libraries not being installed. For more detailed information, you can consult the official documentation for the pandas, numpy, matplotlib, statsmodels, sklearn, seaborn packages.6. Contact Information:-----------------------------------------------------------------------------------------------For any questions, troubleshooting, or further assistance with the scripts and usage of this project, please feel free to reach out to the project author:- June Yun  Email: yunleejune@gmail.com  GitHub: https://github.com/l0301lee  LinkedIn: www.linkedin.com/in/june-yun-6380221b8===============================================================================================End of README===============================================================================================